webpackJsonp([1],{0:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}var o=n(1),u=r(o),a=n(31),i=r(a),l=n(188),c=n(250),f=r(c);i["default"].render(u["default"].createElement(l.Router,{history:l.hashHistory},f["default"]),document.getElementById("content"))},250:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),u=r(o),a=n(188),i=n(251),l=r(i),c=n(263),f=r(c),s=u["default"].createElement(a.Route,{path:"/",component:l["default"]},u["default"].createElement(a.IndexRoute,{component:f["default"]}),u["default"].createElement(a.Route,{path:"/all",component:f["default"]}),u["default"].createElement(a.Route,{path:"*",component:f["default"]}));t["default"]=s},251:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(1),c=r(l),f=n(179),s=n(165),p=n(249),d=r(p),y=n(252),h=r(y),b=n(257),v=r(b),m=(0,s.applyMiddleware)(d["default"])(s.createStore),O=m(h["default"]);(0,v["default"])();var E=function(e){function t(){return o(this,t),u(this,Object.getPrototypeOf(t).apply(this,arguments))}return a(t,e),i(t,[{key:"render",value:function(){return c["default"].createElement(f.Provider,{store:O},this.props.children)}}]),t}(c["default"].Component);t["default"]=E},252:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(165),o=n(253),u=n(255),a=(0,r.combineReducers)({todos:o.todos,input:o.input,filterName:u.filterName});t["default"]=a},253:function(e,t,n){"use strict";function r(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function o(e,t){switch(t.type){case i.ADD_TODO:return{id:t.id,text:t.value,completed:!1};case i.TOGGLE_TODO:return e.id!==t.id?e:Object.assign({},e,{completed:!e.completed});default:return e}}function u(){var e=arguments.length<=0||void 0===arguments[0]?"":arguments[0],t=arguments[1];switch(t.type){case i.SAVE_INPUT:return t.value;default:return e}}function a(){var e=arguments.length<=0||void 0===arguments[0]?[]:arguments[0],t=arguments[1];switch(t.type){case i.ADD_TODO:return[].concat(r(e),[o(void 0,t)]);case i.TOGGLE_TODO:return e.map(function(e){return o(e,t)});case i.DELETE_TODO:return e.filter(function(e){return e.id!==t.id});case i.CLEAR_TODO:return[];default:return e}}Object.defineProperty(t,"__esModule",{value:!0}),t.input=u,t.todos=a;var i=n(254)},254:function(e,t){"use strict";function n(e){return{type:l,id:y++,value:e}}function r(e){return{type:d,value:e}}function o(e){return{type:c,id:e}}function u(e){return{type:f,id:e}}function a(e){return{type:p,filter:e}}function i(){return{type:s}}Object.defineProperty(t,"__esModule",{value:!0}),t.addTodo=n,t.saveInput=r,t.toggleTodo=o,t.deleteTodo=u,t.filterTodo=a,t.clearTodo=i;var l=t.ADD_TODO="ADD_TODO",c=t.TOGGLE_TODO="TOGGLE_TODO",f=t.DELETE_TODO="DELETE_TODO",s=t.CLEAR_TODO="CLEAR_TODO",p=t.FILTER_TODO="FILTER_TODO",d=t.SAVE_INPUT="SAVE_INPUT",y=0},255:function(e,t,n){"use strict";function r(){var e=arguments.length<=0||void 0===arguments[0]?"ALL":arguments[0],t=arguments[1];switch(t.type){case o.SET_FILTER:return t.filter;default:return e}}Object.defineProperty(t,"__esModule",{value:!0}),t.filterName=r;var o=n(256)},256:function(e,t){"use strict";function n(e){return{type:r,filter:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.setFilter=n;var r=t.SET_FILTER="SET_FILTER"},257:function(e,t,n){var r=(n(258),n(259)),o=!1;e.exports=function(e){e=e||{};var t=e.shouldRejectClick||r;o=!0,n(40).injection.injectEventPluginsByName({TapEventPlugin:n(260)(t)})}},258:function(e,t,n){"use strict";var r=function(e,t,n,r,o,u,a,i){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,u,a,i],f=0;l=new Error("Invariant Violation: "+t.replace(/%s/g,function(){return c[f++]}))}throw l.framesToPop=1,l}};e.exports=r},259:function(e,t){e.exports=function(e,t){if(e&&t-e<750)return!0}},260:function(e,t,n){"use strict";function r(e,t){var n=f.extractSingleTouch(t);return n?n[e.page]:e.page in t?t[e.page]:t[e.client]+s[e.envScroll]}function o(e,t){var n=r(_.x,t),o=r(_.y,t);return Math.pow(Math.pow(n-e.x,2)+Math.pow(o-e.y,2),.5)}function u(e){return{tapMoveThreshold:v,ignoreMouseThreshold:m,eventTypes:T,extractEvents:function(t,n,u,a){if(b(t))E=j();else if(e(E,j()))return null;if(!y(t)&&!h(t))return null;var i=null,f=o(O,u);return h(t)&&f<v&&(i=c.getPooled(T.touchTap,n,u,a)),y(t)?(O.x=r(_.x,u),O.y=r(_.y,u)):h(t)&&(O.x=0,O.y=0),l.accumulateTwoPhaseDispatches(i),i}}}var a=n(38),i=n(42),l=n(39),c=n(67),f=n(261),s=n(68),p=n(262),d=a.topLevelTypes,y=i.isStartish,h=i.isEndish,b=function(e){var t=[d.topTouchCancel,d.topTouchEnd,d.topTouchStart,d.topTouchMove];return t.indexOf(e)>=0},v=10,m=750,O={x:null,y:null},E=null,_={x:{page:"pageX",client:"clientX",envScroll:"currentPageScrollLeft"},y:{page:"pageY",client:"clientY",envScroll:"currentPageScrollTop"}},w=[d.topTouchStart,d.topTouchCancel,d.topTouchEnd,d.topTouchMove],g=[d.topMouseDown,d.topMouseMove,d.topMouseUp].concat(w),T={touchTap:{phasedRegistrationNames:{bubbled:p({onTouchTap:null}),captured:p({onTouchTapCapture:null})},dependencies:g}},j=function(){return Date.now?Date.now:function(){return+new Date}}();e.exports=u},261:function(e,t){var n={extractSingleTouch:function(e){var t=e.touches,n=e.changedTouches,r=t&&t.length>0,o=n&&n.length>0;return!r&&o?n[0]:r?t[0]:e}};e.exports=n},262:function(e,t){"use strict";var n=function(e){var t;for(t in e)if(e.hasOwnProperty(t))return t;return null};e.exports=n},263:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(1),c=r(l),f=n(188),s=n(179),p=n(264),d=r(p),y=n(265),h=r(y),b=n(267),v=r(b),m=n(269),O=r(m),E=n(270),_=r(E),w=function(e){function t(){return o(this,t),u(this,Object.getPrototypeOf(t).apply(this,arguments))}return a(t,e),i(t,[{key:"render",value:function(){var e=this.props.todos;return c["default"].createElement(_["default"],null,c["default"].createElement(d["default"],null),c["default"].createElement(v["default"],{todos:e}),c["default"].createElement(h["default"],{todos:e}),c["default"].createElement(O["default"],{todos:e}))}}]),t}(c["default"].Component);t["default"]=(0,f.withRouter)((0,s.connect)(function(e){return{todos:e.todos}})(w))},264:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(1),c=r(l),f=n(179),s=n(254),p=function(e){function t(){return o(this,t),u(this,Object.getPrototypeOf(t).apply(this,arguments))}return a(t,e),i(t,[{key:"componentWillMount",value:function(){setTimeout(function(){console.log(1234)},1e3)}},{key:"getInputValue",value:function(e){var t=e.target.value,n=this.props.dispatch;n((0,s.saveInput)(t))}},{key:"addList",value:function(e){e.preventDefault();var t=this.props,n=t.dispatch,r=t.input;this.refs.input.value&&(n((0,s.addTodo)(r)),this.refs.input.value="")}},{key:"render",value:function(){var e=this;return c["default"].createElement("header",null,c["default"].createElement("form",{className:"form-horizontal",onSubmit:function(t){return e.addList(t)}},c["default"].createElement("div",{className:"form-group"},c["default"].createElement("div",{className:"col-md-3 col-xs-9"},c["default"].createElement("input",{type:"text",className:"form-control",ref:"input",onChange:function(t){return e.getInputValue(t)}})),c["default"].createElement("div",{className:"col-md-3 col-xs-3"},c["default"].createElement("button",{type:"submit",className:"btn btn-default"},"add")))))}}]),t}(c["default"].Component);t["default"]=(0,f.connect)(function(e){return{input:e.input}})(p)},265:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(1),f=r(c),s=n(179),p=n(266),d=r(p),y=n(254),h=function(e){function t(){return o(this,t),u(this,Object.getPrototypeOf(t).apply(this,arguments))}return a(t,e),l(t,[{key:"onToggleClick",value:function(e){var t=this.props.dispatch;t((0,y.toggleTodo)(e))}},{key:"onDeleteClick",value:function(e){var t=this.props.dispatch;t((0,y.deleteTodo)(e))}},{key:"render",value:function(){var e=this,t=this.props,n=t.todos,r=t.filterName,o=function(e,t){switch(t){case"ALL":return e;case"COMPLETED":return e.filter(function(e){return e.completed});case"ACTIVE":return e.filter(function(e){return!e.completed})}};return f["default"].createElement("ul",{className:"list-group"},o(n,r).map(function(t){return f["default"].createElement(d["default"],i({key:t.id},t,{toggleClick:function(){return e.onToggleClick(t.id)},deleteClick:function(){return e.onDeleteClick(t.id)}}))}))}}]),t}(f["default"].Component);t["default"]=(0,s.connect)(function(e){return{filterName:e.filterName}})(h)},266:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(1),c=r(l),f=(n(179),function(e){function t(){return o(this,t),u(this,Object.getPrototypeOf(t).apply(this,arguments))}return a(t,e),i(t,[{key:"render",value:function(){var e=this.props,t=e.toggleClick,n=e.deleteClick,r=e.text,o=e.completed;return c["default"].createElement("li",{className:"list-group-item",style:{textDecoration:o?"line-through":"none"}},c["default"].createElement("input",{type:"checkbox",checked:o,onChange:t})," ",r,c["default"].createElement("button",{className:"btn btn-xs pull-right btn-default",type:"button",onClick:n},"删除"))}}]),t}(c["default"].Component));t["default"]=f},267:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(1),c=r(l),f=n(179),s=n(268),p=r(s),d=function(e){function t(){return o(this,t),u(this,Object.getPrototypeOf(t).apply(this,arguments))}return a(t,e),i(t,[{key:"setVisibleFilter",value:function(e){var t=this.props.dispatch;t(setFilter(e.filter))}},{key:"render",value:function(){var e=this.props.todos,t=e.length,n=e.filter(function(e){return!e.completed}).length,r=e.filter(function(e){return e.completed}).length;return c["default"].createElement("section",null,c["default"].createElement("ul",{className:"nav nav-tabs",role:"tablist"},c["default"].createElement(p["default"],{filter:"ALL",num:t},"全部"),c["default"].createElement(p["default"],{filter:"ACTIVE",num:n},"进行中"),c["default"].createElement(p["default"],{filter:"COMPLETED",num:r},"已完成")),c["default"].createElement("br",null))}}]),t}(c["default"].Component);t["default"]=(0,f.connect)()(d)},268:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(1),c=r(l),f=n(179),s=n(256),p=function(e){function t(){return o(this,t),u(this,Object.getPrototypeOf(t).apply(this,arguments))}return a(t,e),i(t,[{key:"setVisibleType",value:function(e){var t=this.props.dispatch;t((0,s.setFilter)(e))}},{key:"render",value:function(){var e=this,t=this.props,n=t.filter,r=t.filterName,o=t.num,u=n===r;return c["default"].createElement("li",{role:"presentation",className:u?"active":"",onClick:function(){return e.setVisibleType(n)}},c["default"].createElement("a",{href:"javascript:void(0);"},this.props.children," ",c["default"].createElement("span",{className:"badge"},o)))}}]),t}(c["default"].Component);t["default"]=(0,f.connect)(function(e){return{filterName:e.filterName}})(p)},269:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(1),c=r(l),f=n(179),s=n(254),p=function(e){function t(){return o(this,t),u(this,Object.getPrototypeOf(t).apply(this,arguments))}return a(t,e),i(t,[{key:"clearAll",value:function(){var e=this.props.dispatch;e((0,s.clearTodo)())}},{key:"render",value:function(){var e=this,t=this.props.todos;return c["default"].createElement("footer",null,c["default"].createElement("div",{className:"row"},c["default"].createElement("div",{className:"col-md-12"},c["default"].createElement("button",{className:"btn btn-default btn-xs pull-right",style:{display:t.length?"block":"none"},onClick:function(){return e.clearAll()}},"清空"))))}}]),t}(c["default"].Component);t["default"]=(0,f.connect)()(p)},270:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(1),c=r(l),f=n(188),s=function(e){function t(){return o(this,t),u(this,Object.getPrototypeOf(t).apply(this,arguments))}return a(t,e),i(t,[{key:"render",value:function(){return c["default"].createElement("section",null,c["default"].createElement("nav",{className:"navbar navbar-default"},c["default"].createElement("div",{className:"container-fluid"},c["default"].createElement("div",{className:"navbar-header"},c["default"].createElement("a",{className:"navbar-brand",href:"#"},"React + Redux + Webpack + Redux-router")))),c["default"].createElement("div",{className:"row"},c["default"].createElement("div",{className:"col-md-8 col-md-offset-2"},this.props.children)))}}]),t}(c["default"].Component);t["default"]=(0,f.withRouter)(s)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,